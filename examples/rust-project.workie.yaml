# Sample .workie.yaml for a Rust Project
# This configuration demonstrates Rust development patterns

name: "Rust Application"
description: "A Rust application with Cargo workspace support"

# Environment variables
env:
  RUST_LOG: "debug"
  RUST_BACKTRACE: "1"
  DATABASE_URL: "postgresql://localhost:5432/rust_app_dev"

# Dependencies
dependencies:
  - name: "rust"
    version: "stable"
  
  - name: "postgresql"
    version: "14"

# Development tasks
tasks:
  install:
    description: "Install Rust toolchain and update"
    commands:
      - "rustup update"
      - "rustup component add rustfmt clippy"
  
  build:
    description: "Build the project"
    commands:
      - "cargo build"
  
  build:release:
    description: "Build in release mode"
    commands:
      - "cargo build --release"
  
  run:
    description: "Run the application"
    commands:
      - "cargo run"
  
  dev:
    description: "Run with file watching (requires cargo-watch)"
    commands:
      - "cargo watch -x run"
    depends_on: ["tools:install"]
  
  test:
    description: "Run all tests"
    commands:
      - "cargo test"
      - "cargo test --doc"
  
  test:integration:
    description: "Run integration tests"
    commands:
      - "cargo test --test '*'"
  
  bench:
    description: "Run benchmarks"
    commands:
      - "cargo bench"
  
  lint:
    description: "Run Clippy linter"
    commands:
      - "cargo clippy -- -D warnings"
      - "cargo clippy --tests -- -D warnings"
  
  format:
    description: "Format code with rustfmt"
    commands:
      - "cargo fmt"
  
  check:
    description: "Check code without building"
    commands:
      - "cargo check"
      - "cargo check --tests"
  
  doc:
    description: "Generate documentation"
    commands:
      - "cargo doc --no-deps --open"
  
  clean:
    description: "Clean build artifacts"
    commands:
      - "cargo clean"
  
  audit:
    description: "Audit dependencies for security issues"
    commands:
      - "cargo audit"
    depends_on: ["tools:install"]
  
  update:
    description: "Update dependencies"
    commands:
      - "cargo update"
  
  migrate:
    description: "Run database migrations (with sqlx)"
    commands:
      - "cargo sqlx migrate run"
  
  migrate:revert:
    description: "Revert last migration"
    commands:
      - "cargo sqlx migrate revert"

# Tool installation
tools:
  install:
    description: "Install development tools"
    commands:
      - "cargo install cargo-watch"
      - "cargo install cargo-audit"
      - "cargo install sqlx-cli"
      - "cargo install cargo-expand"
      - "cargo install cargo-deny"

# File watching
watch:
  - pattern: "src/**/*.rs"
    tasks: ["check", "test"]
  - pattern: "Cargo.toml"
    tasks: ["check"]
  - pattern: "Cargo.lock"
    tasks: ["audit"]

# Git hooks
hooks:
  pre-commit:
    - "cargo fmt -- --check"
    - "cargo clippy -- -D warnings"
    - "cargo test"
  
  pre-push:
    - "cargo build --release"
    - "cargo test --release"

# Custom scripts
scripts:
  setup:
    description: "Complete project setup"
    commands:
      - "workie run install"
      - "workie run tools:install"
      - "createdb rust_app_dev || echo 'Database might already exist'"
      - "workie run migrate"
  
  coverage:
    description: "Generate test coverage report"
    commands:
      - "cargo tarpaulin --out Html --output-dir coverage"
  
  expand:
    description: "Expand macros in main.rs"
    commands:
      - "cargo expand --bin main"
  
  deny:
    description: "Check dependencies against deny.toml"
    commands:
      - "cargo deny check"
  
  flamegraph:
    description: "Generate flamegraph for performance analysis"
    commands:
      - "cargo flamegraph --bin main"

# Workspace configuration
workspace:
  members:
    - "core"
    - "cli"
    - "web"
    - "common"
  
  tasks:
    test:all:
      description: "Test all workspace members"
      commands:
        - "cargo test --workspace"
    
    build:all:
      description: "Build all workspace members"
      commands:
        - "cargo build --workspace"
    
    lint:all:
      description: "Lint all workspace members"
      commands:
        - "cargo clippy --workspace -- -D warnings"

# Cross-compilation targets
targets:
  linux:
    description: "Build for Linux"
    commands:
      - "cargo build --target x86_64-unknown-linux-gnu --release"
  
  windows:
    description: "Build for Windows"
    commands:
      - "cargo build --target x86_64-pc-windows-gnu --release"
  
  macos:
    description: "Build for macOS"
    commands:
      - "cargo build --target x86_64-apple-darwin --release"

# Documentation
docs:
  setup: |
    ## Rust Project Setup
    
    1. Install Rust toolchain: `workie run install`
    2. Install dev tools: `workie run tools:install`
    3. Set up database: `createdb rust_app_dev`
    4. Run migrations: `workie run migrate`
    5. Start development: `workie run dev`
  
  workflow: |
    ## Development Workflow
    
    - Quick check: `workie run check`
    - Run tests: `workie run test`
    - Format code: `workie run format`
    - Lint code: `workie run lint`
    - Build release: `workie run build:release`
  
  tools: |
    ## Useful Tools
    
    - File watching: `workie run dev`
    - Documentation: `workie run doc`
    - Security audit: `workie run audit`
    - Coverage report: `workie run coverage`
    - Macro expansion: `workie run expand`
