# Sample .workie.yaml for a Go Microservice
# This configuration demonstrates Go development patterns

name: "Go Microservice"
description: "A Go-based REST API microservice with Docker support"

# Environment variables
env:
  GO_ENV: "development"
  PORT: "8080"
  DATABASE_URL: "postgres://localhost:5432/go_service_dev?sslmode=disable"
  REDIS_URL: "redis://localhost:6379"

# Dependencies
dependencies:
  - name: "go"
    version: "1.21"
  
  - name: "postgresql"
    version: "14"
  
  - name: "redis"
    version: "7"
  
  - name: "docker"
    version: "latest"

# Development tasks
tasks:
  install:
    description: "Install Go dependencies"
    commands:
      - "go mod download"
      - "go mod tidy"
  
  build:
    description: "Build the application"
    commands:
      - "go build -o bin/app ./cmd/server"
    depends_on: ["install"]
  
  dev:
    description: "Start development server with hot reload"
    commands:
      - "air"
    depends_on: ["install"]
  
  run:
    description: "Run the application"
    commands:
      - "go run ./cmd/server"
    depends_on: ["install"]
  
  test:
    description: "Run tests"
    commands:
      - "go test ./..."
      - "go test -race ./..."
      - "go test -coverprofile=coverage.out ./..."
  
  test:integration:
    description: "Run integration tests"
    commands:
      - "go test -tags=integration ./..."
  
  benchmark:
    description: "Run benchmarks"
    commands:
      - "go test -bench=. ./..."
  
  lint:
    description: "Run linting and formatting"
    commands:
      - "gofmt -l ."
      - "go vet ./..."
      - "golangci-lint run"
  
  format:
    description: "Format Go code"
    commands:
      - "gofmt -w ."
      - "goimports -w ."
  
  generate:
    description: "Run go generate"
    commands:
      - "go generate ./..."
  
  migrate:
    description: "Run database migrations"
    commands:
      - "migrate -path ./migrations -database $DATABASE_URL up"
  
  migrate:down:
    description: "Rollback database migrations"
    commands:
      - "migrate -path ./migrations -database $DATABASE_URL down"
  
  docker:build:
    description: "Build Docker image"
    commands:
      - "docker build -t go-microservice ."
  
  docker:run:
    description: "Run Docker container"
    commands:
      - "docker run -p 8080:8080 --env-file .env go-microservice"
    depends_on: ["docker:build"]
  
  clean:
    description: "Clean build artifacts"
    commands:
      - "rm -rf bin/"
      - "go clean -cache"
      - "go clean -testcache"

# File watching
watch:
  - pattern: "**/*.go"
    tasks: ["lint", "test"]
  - pattern: "go.mod"
    tasks: ["install"]
  - pattern: "go.sum"
    tasks: ["install"]

# Git hooks
hooks:
  pre-commit:
    - "workie run lint"
    - "workie run test"
  
  pre-push:
    - "workie run build"
    - "workie run test:integration"

# Custom scripts
scripts:
  mock:
    description: "Generate mocks"
    commands:
      - "mockgen -source=internal/repository/user.go -destination=internal/mocks/user_repo.go"
  
  proto:
    description: "Generate protobuf files"
    commands:
      - "protoc --go_out=. --go-grpc_out=. proto/*.proto"
  
  docs:
    description: "Generate API documentation"
    commands:
      - "swag init -g cmd/server/main.go"

# Documentation
docs:
  setup: |
    ## Go Microservice Setup
    
    1. Install dependencies: `workie run install`
    2. Run migrations: `workie run migrate`
    3. Start development: `workie run dev`
    
    API will be available at http://localhost:8080
    Health check: http://localhost:8080/health
  
  docker: |
    ## Docker Development
    
    1. Build image: `workie run docker:build`
    2. Run container: `workie run docker:run`
    
    Or use docker-compose for full stack:
    ```bash
    docker-compose up -d
    ```
  
  testing: |
    ## Testing
    
    - Unit tests: `workie run test`
    - Integration tests: `workie run test:integration`
    - Benchmarks: `workie run benchmark`
    - Coverage: Check coverage.out after running tests
