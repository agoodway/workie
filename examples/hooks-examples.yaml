# Workie Hook Examples
# ===================
# This file demonstrates various hook usage patterns for different development workflows

files_to_copy:
  - .env.example
  - package.json
  - docker-compose.yml

hooks:
  # Set timeout for all hooks (default: 5 minutes)
  timeout_minutes: 10

  # Post-creation hooks - run after creating a new worktree
  post_create:
    # Basic setup commands
    - "echo 'üöÄ Setting up new development environment...'"
    
    # Install dependencies based on project type
    - "npm install || echo '‚ö†Ô∏è npm install failed or not needed'"
    - "pip install -r requirements.txt || echo '‚ö†Ô∏è pip install failed or not needed'"
    - "bundle install || echo '‚ö†Ô∏è bundle install failed or not needed'"
    
    # Setup development database
    - "docker-compose up -d db || echo '‚ö†Ô∏è Database setup failed or not needed'"
    
    # Run database migrations
    - "npm run migrate || echo '‚ö†Ô∏è Migrations failed or not needed'"
    
    # Setup git hooks
    - "cp .githooks/* .git/hooks/ || echo '‚ö†Ô∏è Git hooks setup failed or not needed'"
    - "chmod +x .git/hooks/* || echo '‚ö†Ô∏è Git hooks permissions failed or not needed'"
    
    # Create necessary directories
    - "mkdir -p logs tmp cache || echo '‚ö†Ô∏è Directory creation failed'"
    
    # Setup completion message
    - "echo '‚úÖ Environment setup complete! Happy coding!'"

  # Pre-removal hooks - run before removing a worktree
  pre_remove:
    # Clean up processes
    - "echo 'üßπ Cleaning up development environment...'"
    
    # Stop running services
    - "docker-compose down || echo '‚ö†Ô∏è Docker cleanup failed or not needed'"
    
    # Clean up temporary files
    - "rm -rf logs/* tmp/* cache/* || echo '‚ö†Ô∏è Temp cleanup failed'"
    
    # Archive important data
    - "tar -czf ../backup-$(date +%Y%m%d-%H%M%S).tar.gz . || echo '‚ö†Ô∏è Backup failed'"
    
    # Final cleanup message
    - "echo '‚úÖ Cleanup complete!'"

# Security Note:
# - Always use '|| echo' patterns to handle command failures gracefully
# - Avoid destructive commands like 'rm -rf /' 
# - Test hooks thoroughly before using in production
# - Use relative paths and validate inputs
# - Be cautious with network commands and file permissions
