# Workie Hook Features Demo Configuration
# ========================================
# This file demonstrates all available hook features including:
# - Lifecycle hooks (post_create, pre_remove)
# - Claude Code integration hooks
# - AI-powered security decisions
# - System notifications
# - Error handling and conditional execution

files_to_copy:
  - .env.example
  - scripts/
  - config/development.yaml

hooks:
  # Timeout for all hooks (in minutes)
  timeout_minutes: 5

  # Workie lifecycle hooks
  post_create:
    - 'echo "ðŸš€ Starting new work session in $(pwd)"'
    - 'npm install --silent || echo "No package.json found"'
    - 'test -f .env.example && cp .env.example .env || echo "No .env.example"'
    
  pre_remove:
    - 'echo "ðŸ§¹ Cleaning up work session"'
    - 'git status --short'

  # Claude Code integration hooks
  claude_pre_tool_use:
    - 'echo "[$(date +%Y-%m-%d\ %H:%M:%S)] Tool: $TOOL_NAME" >> ~/.workie/claude-activity.log'
    - |
      # Security check for sensitive operations
      case "$TOOL_NAME" in
        Write|Edit)
          if [[ "$1" =~ ^/etc/|^/sys/|^/root/ ]]; then
            echo "BLOCKED: System file modification attempt" >&2
            exit 1
          fi
          ;;
        Bash)
          echo "WARNING: Shell command execution" >&2
          ;;
      esac

  claude_post_tool_use:
    - 'test "$TOOL_NAME" = "Edit" && npm run lint --silent || true'
    - 'test "$TOOL_NAME" = "Write" && echo "File written" || true'

  claude_notification:
    - 'echo "[$(date +%Y-%m-%d\ %H:%M:%S)] Notification: $MESSAGE" >> ~/.workie/notifications.log'
    - 'test -f /usr/bin/afplay && afplay /System/Library/Sounds/Glass.aiff || true'  # macOS sound

  claude_user_prompt_submit:
    - 'echo "[$(date +%Y-%m-%d\ %H:%M:%S)] User prompt submitted" >> ~/.workie/prompts.log'

  claude_stop:
    - 'echo "Claude finished responding. Running tests..."'
    - 'npm test --silent || echo "No tests configured"'
    - 'git diff --stat'

  claude_subagent_stop:
    - 'echo "Subagent task completed"'

  claude_pre_compact:
    - 'echo "Context compaction starting - saving state..."'
    - 'git add -A && git commit -m "WIP: Auto-save before context compaction" || true'

  # AI-powered decision making for security
  ai_decision:
    enabled: true
    model: "llama3.2"        # Uses your Ollama model
    strict_mode: false       # If true, any hook failure = automatic block

  # System notifications configuration
  system_notifications:
    enabled: true
    title: "Workie - Claude Code"
    # icon: "assets/workie-icon.png"  # Optional: path to custom icon

# AI configuration for smart features
ai:
  enabled: true
  model:
    provider: "ollama"
    name: "llama3.2"
    temperature: 0.7
    max_tokens: 2048
  ollama:
    base_url: "http://localhost:11434"
    keep_alive: "5m"

# Issue provider configuration (optional)
providers:
  github:
    enabled: true
    settings:
      token_env: "GITHUB_TOKEN"
      owner: "your-org"
      repo: "your-repo"
    branch_prefix:
      bug: "fix/"
      feature: "feat/"
      default: "issue/"

# Default provider when multiple are configured
default_provider: github
